var search_data = {"index":{"searchIndex":["adsr","chorus","compressor","delay","envelope","eq","gverb","hihat","kickdrum","limiter","mixerchannel","monosynth","moogfilter","oscillator","polysynth","sendchannel","sequencerdsl","pattern","song","snaredrum","sound","statevariablefilter","tuneddrum","utils","waveshaper","active_events()","attack=()","bitreduce()","def_pattern()","drum_pattern()","duck()","duration()","get()","length()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","note_pattern()","pattern()","play()","release()","release=()","render()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","send()","set()","simple_waveshaper()","song()","start()","start()","stop()","stop()","readme"],"longSearchIndex":["adsr","chorus","compressor","delay","envelope","eq","gverb","hihat","kickdrum","limiter","mixerchannel","monosynth","moogfilter","oscillator","polysynth","sendchannel","sequencerdsl","sequencerdsl::pattern","sequencerdsl::song","snaredrum","sound","statevariablefilter","tuneddrum","utils","waveshaper","sound#active_events()","compressor#attack=()","utils#bitreduce()","sequencerdsl#def_pattern()","sequencerdsl::pattern#drum_pattern()","mixerchannel#duck()","sound#duration()","sound#get()","sequencerdsl::song#length()","adsr::new()","chorus::new()","compressor::new()","delay::new()","envelope::new()","eq::new()","gverb::new()","hihat::new()","kickdrum::new()","mixerchannel::new()","monosynth::new()","moogfilter::new()","oscillator::new()","polysynth::new()","sendchannel::new()","snaredrum::new()","sound::new()","statevariablefilter::new()","waveshaper::new()","sequencerdsl::pattern#note_pattern()","sequencerdsl::song#pattern()","sequencerdsl::song#play()","sound#release()","compressor#release=()","sequencerdsl#render()","adsr#run()","chorus#run()","compressor#run()","delay#run()","envelope#run()","eq#run()","gverb#run()","hihat#run()","kickdrum#run()","limiter#run()","mixerchannel#run()","monosynth#run()","moogfilter#run()","oscillator#run()","polysynth#run()","sendchannel#run()","snaredrum#run()","sound#run()","statevariablefilter#run()","tuneddrum#run()","waveshaper#run()","mixerchannel#send()","sound#set()","utils#simple_waveshaper()","sequencerdsl#song()","snaredrum#start()","sound#start()","snaredrum#stop()","sound#stop()",""],"info":[["Adsr","","Adsr.html","","<p>Implementation of a linear ADSR envelope generator with a tracking value so that envelope restarts don&#39;t …\n"],["Chorus","","Chorus.html","","<p>A simple chorus\n"],["Compressor","","Compressor.html","","<p>simple compresor taken from www.musicdsp.org/en/latest/Effects/204-simple-compressor-class-c.html\n"],["Delay","","Delay.html","","<p>Simple delay with mix and feedback parameters Currently doesn&#39;t really have a variable delay time, …\n"],["Envelope","","Envelope.html","","<p>Simple Attack / Release envelope\n"],["Eq","","Eq.html","","<p>Simple 3 band Equalizer with variable shelving frequencies\n<p>Source: www.musicdsp.org/en/latest/Filters/236-3-band-equaliser.html …\n"],["GVerb","","GVerb.html","","<p>GVerb is a relatively simple reverb implementation\n"],["Hihat","","Hihat.html","","<p>Simple Hihat generator Nois &gt; Filter &gt; Amp\n"],["KickDrum","","KickDrum.html","","<p>A simple kick drum generator\n"],["Limiter","","Limiter.html","","<p>Simple soft limiter Taken from github.com/pichenettes/stmlib/blob/448babb082dfe7b0a1ffbf0b349eefde64691b49/dsp/dsp.h#L97 …\n"],["MixerChannel","","MixerChannel.html","","<p>Emulation of a mixer channel on a mixing desk has a built in EQ, compressor and ducker, can run an arbitrary …\n"],["Monosynth","","Monosynth.html","","<p>A monosynth sound generator\n"],["MoogFilter","","MoogFilter.html","","<p>A better sounding lowpass (for some applications that is) Source www.musicdsp.org/en/latest/Filters/26-moog-vcf-variation-2.html …\n"],["Oscillator","","Oscillator.html","","<p>simple  oscillator can currently do squarewave, sawtooth and sine this oscillator is not bandwidth limited …\n"],["Polysynth","","Polysynth.html","","<p>A simple polyphonic synthesizer\n<p>OSC &gt; Filter &gt; Amp\n"],["SendChannel","","SendChannel.html","","<p>t Channel subclass specifically for SendChannels\n"],["SequencerDSL","","SequencerDSL.html","","<p>A module that implements a sequencer DSL\n<p>Usage\n\n<pre>include SequencerDSL\ndef_pattern(:pattern_name, 16) do\n ...</pre>\n"],["SequencerDSL::Pattern","","SequencerDSL/Pattern.html","","<p>The Pattern class is instantiated by the def_pattern helper\n"],["SequencerDSL::Song","","SequencerDSL/Song.html","","<p>A\n"],["SnareDrum","","SnareDrum.html","","<p>Simple snare drum generator\n"],["Sound","","Sound.html","","<p>Base class for all sound generators and the mixer channels Handles events (note on / off) and automation …\n"],["StateVariableFilter","","StateVariableFilter.html","","<p>Simple State Variable filter\n<p>source: www.musicdsp.org/en/latest/Filters/23-state-variable.html More info: …\n"],["TunedDrum","","TunedDrum.html","","<p>Special case of the kick drum that allows to run it from a note pattern to create percussive sounds\n"],["Utils","","Utils.html","","<p>Some simple utils\n"],["Waveshaper","","Waveshaper.html","","<p>waveshaper, source www.musicdsp.org/en/latest/Effects/41-waveshaper.html amount can go from 1 to … …\n"],["active_events","Sound","Sound.html#method-i-active_events","(t)","<p>returns active events at time t\n"],["attack=","Compressor","Compressor.html#method-i-attack-3D","(attack)","<p>set attack\n"],["bitreduce","Utils","Utils.html#method-i-bitreduce","(input, bits=8)","<p>a simple bitreducer using rounding bits is the number of bits you want to reduce to\n"],["def_pattern","SequencerDSL","SequencerDSL.html#method-i-def_pattern","(name, steps, &block)","<p>Define a note pattern\n"],["drum_pattern","SequencerDSL::Pattern","SequencerDSL/Pattern.html#method-i-drum_pattern","(sound, pattern)","<p>Define a drum pattern\n<p>sound is the sound generator object\n<p>pattern is a pattern in the form of a string …\n"],["duck","MixerChannel","MixerChannel.html#method-i-duck","(t)","<p>Schedule ducking at time t (in seconds)\n"],["duration","Sound","Sound.html#method-i-duration","(t=0)","<p>this + start time makes it possible to delete events from list\n<p>define this in your generator implementation …\n"],["get","Sound","Sound.html#method-i-get","(parameter, time)","<p>get the exact parameter value including interpolation\n<p>parameter &mdash; parameter name\n<p>time &mdash; time of from where …\n"],["length","SequencerDSL::Song","SequencerDSL/Song.html#method-i-length","()","<p>Returns the length of the song in seconds plus 2 seconds to allow for reverb tails etc.\n"],["new","Adsr","Adsr.html#method-c-new","(attack, decay, sustain, release)","<p>Creates new ADSR envelope\n<p>attack, decay and release are times in seconds (as float)\n<p>sustain should be between …\n"],["new","Chorus","Chorus.html#method-c-new","(sample_rate, phase: 0.0, rate: 0.5, delay_time: 7.0, mix: 0.5)","<p>Create new Chorus instance\n<p>phase allows you to shift the phase of the delayed signal additionally\n<p>rate …\n"],["new","Compressor","Compressor.html#method-c-new","(srate, attack: 10.0, release: 100.0, ratio: 1.0, threshold: 0.0)","<p>Create compressor instance\n<p>attack is the attack time in ms\n<p>release is the release time in ms\n"],["new","Delay","Delay.html#method-c-new","(sample_rate, time: 0.2, mix: 0.5, feedback: 0.4, &block)","<p>time is given in seconds\n<p>mix (0 = no delay, 1 = only delay)\n<p>feedback (0 = zero feedback, 1 = full feedback …\n"],["new","Envelope","Envelope.html#method-c-new","(attack,release)","<p>create new attack/release envelope\n"],["new","Eq","Eq.html#method-c-new","(sample_rate=44100, lowfreq: 880, highfreq: 5000)","<p>Create new Equalizer instance\n<p>lowfreq and highfreq are the shelving frequencies in Hz\n"],["new","GVerb","GVerb.html#method-c-new","(srate, max_room_size: 120.0, room_size: 50.0, rev_time: 2.0, damping: 0.3, spread: 15.0, input_bandwidth: 1.5, early_level: 0.8, tail_level: 0.5, mix: 0.2)","<p>Create new GVerb instance\n<p>max_room_size is the maximum room size you&#39;ll use\n<p>room_size is the current …\n"],["new","Hihat","Hihat.html#method-c-new","(sfreq, preset = {})","<p>parameters\n<p>flt_frequency - center frequency of the bandpass filter\n<p>flt_Q - Q (resonance) value of the bandpass …\n"],["new","KickDrum","KickDrum.html#method-c-new","(sfreq, preset = {})","<p>Structure\n<p>Pitch Env &gt; Sine wave OSC &gt;\n<p>parameter:\n"],["new","MixerChannel","MixerChannel.html#method-c-new","(srate, source, insert_effects: [], sends: [], preset: {})","<p>source - Source sound generator\n<p>insert_effects - Array of effects instances\n<p>sends - Array of send values …\n"],["new","Monosynth","Monosynth.html#method-c-new","(sfreq, preset={})","<p>Parameters\n<p>amp_attack, _decay, _sustain, _release - Amp Envelope params\n<p>flt_attack, _decay, _sustain, _release …\n"],["new","MoogFilter","MoogFilter.html#method-c-new","()","<p>create new instance\n"],["new","Oscillator","Oscillator.html#method-c-new","(sampling_frequency)","<p>Create new oscillator\n"],["new","Polysynth","Polysynth.html#method-c-new","(sfreq, preset = {})","<p>Parameters\n<p>amp_attack, _decay, _sustain, _release - Amp Envelope params\n<p>flt_attack, _decay, _sustain, _release …\n"],["new","SendChannel","SendChannel.html#method-c-new","(srate, insert_effects: [], sends: [], preset: {})","<p>creates new send channel. See MixerChannel#new for parameters\n"],["new","SnareDrum","SnareDrum.html#method-c-new","(sfreq, preset = {})","<p>Parameters\n<p>flt_frequency &mdash; Noise filter frequency\n<p>flt_envmod &mdash; Noise filter frequency modulation by envelope …\n"],["new","Sound","Sound.html#method-c-new","(sfreq, mode: :polyphonic)","<p>create new sound generator instance\n<p><code>super(sfreq, mode: $mode)</code> should be called from the sound generator …\n"],["new","StateVariableFilter","StateVariableFilter.html#method-c-new","(sfreq)","<p>Create new filter instance\n"],["new","Waveshaper","Waveshaper.html#method-c-new","(amount)","<p>Create waveshaper instance\n<p>amount &mdash; Amount can be from 0 to oo\n\n"],["note_pattern","SequencerDSL::Pattern","SequencerDSL/Pattern.html#method-i-note_pattern","(sound, pattern)","<p>Define a note pattern\n<p>sound &mdash; sound generator base class\n<p>pattern &mdash; a note pattern\n"],["pattern","SequencerDSL::Song","SequencerDSL/Song.html#method-i-pattern","(name, at: 0, repeat: 1, length: nil)","<p>inserts a pattern into the song\n<p>name &mdash; pattern needs to be defined by <code>def_pattern</code>\n<p>at &mdash; Position in bars to …\n"],["play","SequencerDSL::Song","SequencerDSL/Song.html#method-i-play","()","<p>Sends all scheduled events to the instruments\n"],["release","Sound","Sound.html#method-i-release","(t=0)","<p>this + end time makes it possible to delete events from list\n<p>define this in your generator implementation …\n"],["release=","Compressor","Compressor.html#method-i-release-3D","(release)","<p>set release\n"],["render","SequencerDSL","SequencerDSL.html#method-i-render","(sfreq, start=0, len=nil)","<p>render the song the actual rendering needs to be done manually in the block passed start &amp; length …\n"],["run","Adsr","Adsr.html#method-i-run","(t, released)","<p>run the envelope.\n<p>if released is given (should be &lt;= t), the envelope will enter the release stage …\n"],["run","Chorus","Chorus.html#method-i-run","(input)","<p>run the chorus\n"],["run","Compressor","Compressor.html#method-i-run","(input)","<p>run compressor\n"],["run","Delay","Delay.html#method-i-run","(input)","<p>run delay\n"],["run","Envelope","Envelope.html#method-i-run","(t, a=@attack, r=@release)","<p>run the attack/release envelope You can override attack and decay\n"],["run","Eq","Eq.html#method-i-run","(sample)","<p>run equalizer\n"],["run","GVerb","GVerb.html#method-i-run","(x)","<p>runs a value through the reverb, returns the reverberated signal mixed with the original.\n"],["run","Hihat","Hihat.html#method-i-run","(offset)","<p>Run the generator (offset is given in samples)\n"],["run","KickDrum","KickDrum.html#method-i-run","(offset)","<p>Run generator\n"],["run","Limiter","Limiter.html#method-i-run","(x)","<p>run limiter\n"],["run","MixerChannel","MixerChannel.html#method-i-run","(offset)","<p>runs channel\n"],["run","Monosynth","Monosynth.html#method-i-run","(offset)","<p>run generator\n"],["run","MoogFilter","MoogFilter.html#method-i-run","(input, fc, res)","<p>runs the filter on the input value fc is the cutoff frequency (not in Hz but from 0..1) res is the resonance …\n"],["run","Oscillator","Oscillator.html#method-i-run","(frequency, pulse_width: 0.5, waveform: :square)","<p>frequency &mdash; Oscillator frequency in Hz (can be altered at any time)\n<p>pulse_width &mdash; pulse width, only in effect …\n"],["run","Polysynth","Polysynth.html#method-i-run","(offset)","<p>run sound generator\n"],["run","SendChannel","SendChannel.html#method-i-run","(offset, input)","<p>run the send channel\n"],["run","SnareDrum","SnareDrum.html#method-i-run","(offset)","<p>run the generator\n"],["run","Sound","Sound.html#method-i-run","(offset)","<p>run the generator at offset (samples from song start)\n"],["run","StateVariableFilter","StateVariableFilter.html#method-i-run","(input, frequency, q, type: :lowpass)","<p>run the filter from input value\n<p>frequency &mdash; cutoff freq in Hz\n<p>q &mdash; resonance, from 0 to …\n"],["run","TunedDrum","TunedDrum.html#method-i-run","(offset)",""],["run","Waveshaper","Waveshaper.html#method-i-run","(input)","<p>run waveshaper\n"],["send","MixerChannel","MixerChannel.html#method-i-send","(index)","<p>returns send portion of output signal for send index\n"],["set","Sound","Sound.html#method-i-set","(parameter, time, value, type: :set)","<p>sets a parameter to a specific value at a given time. you can interpolate linearly between two points …\n"],["simple_waveshaper","Utils","Utils.html#method-i-simple_waveshaper","(input, a)","<p>waveshaper, source www.musicdsp.org/en/latest/Effects/41-waveshaper.html a can go from 1 to … oo the …\n"],["song","SequencerDSL","SequencerDSL.html#method-i-song","(bpm: 120, &block)","<p>Define a song in the given tempo (in BPM) using the Song#pattern method\n"],["start","SnareDrum","SnareDrum.html#method-i-start","(t, note = 36, velocity = 1.0)","<p>create a note on event\n<p>t &mdash; time in seconds since song start\n<p>note &mdash; MIDI note number\n"],["start","Sound","Sound.html#method-i-start","(t, note = 36, velocity = 1.0)","<p>create a note on event at time t with note and velocity\n<p>t &mdash; time in seconds from song start\n<p>note &mdash; MIDI note …\n"],["stop","SnareDrum","SnareDrum.html#method-i-stop","(t, note = 36)","<p>create a note off event\n<p>t &mdash; time in seconds since song start\n<p>note &mdash; MIDI note number\n"],["stop","Sound","Sound.html#method-i-stop","(t, note = 36)","<p>create a note off event at time t with note\n<p>t &mdash; time in seconds from song start\n<p>note &mdash; MIDI note\n"],["README","","README_md.html","","<p>RubySynth\n\n<pre>_______       __          ___t____             __   __\n|   _   .--.--|  |--.--.--|   _   .--.--.-----| ...</pre>\n"]]}}